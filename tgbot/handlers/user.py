from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, Update
from aiogram.utils.markdown import hbold

from tgbot.keyboards.callback_data import ProductsCallback
from tgbot.keyboards.inline import rules_kb, menu_kb, product_kb, back_to_menu_kb
from tgbot.misc.platform_api import send_upd, send_to_api
from tgbot.misc.questions import products_questions
from tgbot.misc.states import dialog
from tgbot.models.db_commands import get_user, create_user, delete_user, get_session, create_session

user_router = Router()


@user_router.message(commands=["start"], state=None)
async def user_start(message: Message):
    user = await get_user(message.chat.id)
    if not user or not user.is_active:
        return await message.answer("–°–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å –ª–∏ –≤ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏?", reply_markup=await rules_kb())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.message(commands=["stop_dialog"])
async def stop_dialog(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º")


@user_router.callback_query(text="accept_rules")
async def accept_rules(call: CallbackQuery):
    await create_user(call.message.chat.id, username=call.message.chat.username, is_active=True)
    await send_to_api(call.message.chat.id, title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∞–≤–∏–ª–∞", name="start")
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.callback_query(text="back_to_menu", state="*")
async def back_to_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await send_to_api(call.message.chat.id)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.callback_query(text="cancel_rules")
async def cancel_rules(call: CallbackQuery):
    await send_to_api(call.message.chat.id)
    await call.message.edit_text("–í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏, –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@user_router.callback_query(text="disable_bot")
async def cancel_rules(call: CallbackQuery):
    await delete_user(call.message.chat.id)
    await call.message.edit_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º, "
                                 "–¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")


@user_router.callback_query(text="products")
async def products(call: CallbackQuery):
    await send_to_api(call.message.chat.id)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await product_kb())


@user_router.callback_query(ProductsCallback.filter())
async def show_products(call: CallbackQuery, callback_data: ProductsCallback):
    questions_id = callback_data.id
    questions = products_questions()
    keys = list(questions.keys())
    await call.message.edit_text(
        text="\n".join(
            [
                hbold(keys[questions_id]),
                f'\n{questions[keys[questions_id]]}'
            ]
        ), reply_markup=await back_to_menu_kb()
    )


@user_router.callback_query(text="another_question")
async def another_question(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", reply_markup=await back_to_menu_kb())
    await state.set_state(dialog.session)


@user_router.message(state=dialog.session)
async def dialog_with_manager(message: Message, event_update: Update):
    session = await get_session(user_id=message.chat.id)
    await send_to_api(message.chat.id)
    if message.text:
        if message.text.startswith("/"):
            return message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ"
                f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_dialog")
    if session:
        await send_upd(event_update.json())
    else:
        await send_upd(event_update.json(), True)
        await create_session(user_id=message.chat.id)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, /stop_dialog")