from aiogram import Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, Update, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.markdown import hbold

from tgbot.keyboards.inline import rules_kb, menu_kb, back_to_menu_kb
from tgbot.misc.platform_api import send_upd, send_to_api
from tgbot.misc.questions import questions_and_answers
from tgbot.misc.states import dialog
from tgbot.models.db_commands import get_user, create_user, delete_user, get_session, create_session

user_router = Router()


@user_router.message(commands=["start"], state=None)
async def user_start(message: Message):
    user = await get_user(message.chat.id)
    if not user or not user.is_active:
        return await message.answer(hbold(
            f'–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —á–∞—Ç-–±–æ—Ç–µ ¬´–î—Ä—É–∑—å—è SPLAT¬ª'
            f'!–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, —è —Å–æ–≥–ª–∞—à–∞—é—Å—å  —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É '
            f'–º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ  –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
        ), reply_markup=await rules_kb())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.message(commands=["menu"], state=None)
async def user_start(message: Message):
    user = await get_user(message.chat.id)
    if not user or not user.is_active:
        return await message.answer(hbold(
            f'–†–∞–¥—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –≤ —á–∞—Ç-–±–æ—Ç–µ ¬´–î—Ä—É–∑—å—è SPLAT¬ª'
            f'!–ù–∞–∂–∏–º–∞—è –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–∏–Ω—è—Ç—å¬ª, —è —Å–æ–≥–ª–∞—à–∞—é—Å—å  —Å –ü—Ä–∞–≤–∏–ª–∞–º–∏ –ü—Ä–æ–≥—Ä–∞–º–º—ã –∏ –¥–∞—é —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É '
            f'–º–æ–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ  –ü–æ–ª–∏—Ç–∏–∫–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏'
        ), reply_markup=await rules_kb())
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.message(commands=["stop_dialog"])
async def stop_dialog(message: Message, state: FSMContext, event_update: Update):
    await state.clear()
    await send_upd(event_update.json(), close_session=True)
    await message.answer("–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –º–æ–∂–µ—Ç–µ –¥–∞–ª—å—à–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º", reply_markup=await back_to_menu_kb())


@user_router.callback_query(text="accept_rules")
async def accept_rules(call: CallbackQuery):
    await create_user(call.message.chat.id, username=call.message.chat.username, is_active=True)
    await send_to_api(call.message.chat.id, title="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –ø—Ä–∞–≤–∏–ª–∞", name="start")
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.callback_query(text="back_to_menu", state="*")
async def back_to_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await send_to_api(call.message.chat.id)
    await call.message.edit_text("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=await menu_kb())


@user_router.callback_query(text="cancel_rules")
async def cancel_rules(call: CallbackQuery):
    await send_to_api(call.message.chat.id)
    await send_to_api(call.message.chat.id, title="–û—Ç–∫–ª–æ–Ω–∏–ª –ø—Ä–∞–≤–∏–ª–∞", name="cancel_rules")
    await call.message.edit_text("‚ùå –í—ã –Ω–µ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏")


@user_router.callback_query(text="disable_bot")
async def cancel_rules(call: CallbackQuery):
    await delete_user(call.message.chat.id)
    await send_to_api(call.message.chat.id, title="–ü–æ–∫–∏–Ω—É–ª –±–æ—Ç–∞", name="disable_bot")
    await call.message.edit_text("–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º")


@user_router.callback_query(text="another_question")
async def another_question(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞", reply_markup=await back_to_menu_kb())
    await state.set_state(dialog.session)


@user_router.message(state=dialog.session)
async def dialog_with_manager(message: Message, event_update: Update):
    session = await get_session(user_id=message.chat.id)
    await send_to_api(message.chat.id)
    if message.text:
        if message.text.startswith("/"):
            return message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ {message.text} –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–µ—Å—Å–∏–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ"
                f"–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /stop_dialog")
    if session:
        await send_upd(event_update.json())
    else:
        await send_upd(event_update.json(), True)
        await create_session(user_id=message.chat.id)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É, –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —á–∞—Ç–∞ –ø—Ä–æ–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É, /stop_dialog")


@user_router.inline_query(text="#–ü—Ä–æ–¥—É–∫—Ü–∏—è")
@user_router.inline_query(text="#–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
@user_router.inline_query(text="#–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
@user_router.inline_query(text="#–ü—Ä–æ–≥—Ä–∞–º–º–∞")
async def show_question(query: InlineQuery):
    user_id = query.from_user.id
    user = await get_user(user_id)
    if not user or not user.is_active:
        await query.answer(
            results=[],
            switch_pm_text="–ë–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–µ –∏ –ø—Ä–∏–º–∏—Ç–µ –ø—Ä–∞–≤–∏–ª–∞.",
            switch_pm_parameter="inline",
            cache_time=5
        )
        return
    if query.query == "–ü—Ä–æ–¥—É–∫—Ü–∏—è":
        name = "question"
    elif query.query == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞":
        name = "support_inline"
    elif query.query == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        name = "info_inline"
    else:
        name = "program_inline"
    # await send_to_api(user_id, title=f"–ó–∞–ø—Ä–æ—Å –ø–æ —Ç–µ–º–∞—Ç–∏–∫–µ {query.query}", name=name)
    Q_A = await questions_and_answers(query.query)
    result = []
    kb = await menu_kb()
    for number, item in enumerate(Q_A, start=1):
        result.append(InlineQueryResultArticle(id=number,
                                               title=item,
                                               input_message_content=InputTextMessageContent(
                                                   message_text=f'{hbold(item)}\n\n' + Q_A[item],
                                                   disable_web_page_preview=True,
                                               ),
                                               reply_keyboard=kb,
                                               description=Q_A[item][:20] + "..."
                                               ))
    await query.answer(results=result)
